====================
Divide matrix module
====================

This is a test module for matrix_divided - a functions dividing all matrix values by agiven divisor.
----------------------------------------------------------------------------------------------------

Import module
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

If the elements are non-integer/non-float
-----------------------------------------
>>> matrix_divided([[1, 5, 3], [2, 6, 4]], 'div')
Traceback (most recent call last):
...
TypeError: div must be a number

If the divisor is zero
----------------------
>>> matrix_divided([[1, 8, 5], [7, 3, 9]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

If the row length is not uniform
--------------------------------
>>> matrix_divided([1, 2, 3], [4, 5, 6], [7, 2]], 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

If the matrix is empty
----------------------
>>> matrix_divided([[]], 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

If the matrix has one-dimensional list
--------------------------------------
>>> matrix_divided([1, 3], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

If matrix has missing arguments
-------------------------------
>>> matrix_divided([[3], [3]])
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional arguments: 'div'

>>> matrix_divided()
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

If the result is rounded to second decimal
------------------------------------------
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 13)
[[0.08, 0.15, 0.23], [0.31, 0.38, 0.46], [0.54, 0.62, 0.69]]
